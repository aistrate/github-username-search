import { render } from "@testing-library/react";
import { ReactElement, ReactNode } from "react";
import { Provider } from "react-redux";
import { MemoryRouter, useLocation } from "react-router-dom";
import renderer, { ReactTestRendererJSON } from "react-test-renderer";
import styled from "styled-components";
import { createStore } from "../app/store";

export {
  renderWithWrapper,
  createRendererWithWrapper,
  delay,
  RoutingLocation,
  removeClassNames,
};

/**
 * Renderer used by most tests. Uses jsdom as a full DOM implementation in Node.js.
 * Can handle user events (click, etc.) on the page.
 */
function renderWithWrapper(ui: ReactElement, initialRoute = "/") {
  const Wrapper = createWrapper(initialRoute);

  return render(ui, { wrapper: Wrapper });
}

/**
 * Renderer used by snapshot tests.
 */
function createRendererWithWrapper(ui: ReactElement, initialRoute: string) {
  const Wrapper = createWrapper(initialRoute);

  return renderer.create(<Wrapper>{ui}</Wrapper>);
}

function createWrapper(initialRoute: string) {
  const store = createStore();

  const Wrapper = ({ children }: { children: ReactNode }) => (
    <Provider store={store}>
      <MemoryRouter initialEntries={[initialRoute]}>{children}</MemoryRouter>
    </Provider>
  );

  return Wrapper;
}

function delay(ms: number) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}

function RoutingLocation() {
  const location = useLocation();

  return (
    <Container data-testid="routingLocation">
      {location.pathname + location.search}
    </Container>
  );
}

const Container = styled.div`
  position: fixed;
`;

/**
 * CSS class names generated by styled-components are non-deterministic,
 * so they will interfere with snapshot testing.
 */
function removeClassNames(
  tree: null | ReactTestRendererJSON | ReactTestRendererJSON[]
) {
  if (!tree) return;

  if (!Array.isArray(tree)) {
    tree = [tree];
  }

  tree.forEach((n) => {
    if (typeof n === "object" && n.type) {
      if (n.props && n.props.className) {
        delete n.props.className;
      }

      if (n.children) {
        n.children.forEach((child) => {
          if (typeof child !== "string") {
            removeClassNames(child);
          }
        });
      }
    }
  });
}
